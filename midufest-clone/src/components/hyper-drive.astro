---
const { class: className = "" } = Astro.props;
---

<canvas
  aria-hidden="true"
  class:list={[
    "absolute inset-0",
    "transition-opacity duration-1000",
    className,
  ]}
  id="hyperdrive"
  style="mix-blend-mode: screen;"></canvas>

<script>
  const canvas = document.querySelector("#hyperdrive") as HTMLCanvasElement;
  const ctx = canvas.getContext("2d");
  const DURATION = 2000;
  const effect = { x: 0, y: 0, warpspeed: false, paused: true };
  let timeout: NodeJS.Timeout;
  const activeClasses = ["duration-1000"];
  const inactiveClasses = ["opacity-0", "duration-[3s]"];
  const setWarpspeed = (active: boolean) => {
    effect.warpspeed = active;
    if (active) {
      canvas.classList.remove(...inactiveClasses);
      canvas.classList.add(...activeClasses);
    } else {
      canvas.classList.add(...inactiveClasses);
      canvas.classList.add(...activeClasses);
    }
  };
  const setPaused = (paused: boolean) => {
    effect.paused = paused;
    timeout = null;
  };
  function enter() {
    if (timeout) return;
    setPaused(false);
    setWarpspeed(true);
    timeout = setTimeout(() => {
      setWarpspeed(false);
      timeout = setTimeout(() => setPaused(true), DURATION);
    }, DURATION);
    run();
  }
  function leave() {
    setWarpspeed(false);
    if (timeout) {
      clearTimeout(timeout);
      timeout = setTimeout(() => setPaused(true), DURATION);
    }
  }
  enter();
  // Don't ask what this code does. I just found it on StackOverflow.
  // https://stackoverflow.com/questions/46436270/hyperdrive-effect-in-canvas-across-randomly-placed-circles
  function run() {
    // High performance array pool using buubleArray to separate pool objects and active object.
    // This is designed to eliminate GC hits involved with particle systems and
    // objects that have short lifetimes but used often.
    // Warning this code is not well tested.
    const bubbleArray = () => {
      const items = [];
      let count = 0;
      return {
        clear() {
          // warning this dereferences all locally held references and can incur Big GC hit. Use it wisely.
          this.items.length = 0;
          count = 0;
        },
        update() {
          let head, tail;
          head = tail = 0;
          while (head < count) {
            if (items[head].update() === false) {
              head += 1;
            } else {
              if (tail < head) {
                const temp = items[head];
                items[head] = items[tail];
                items[tail] = temp;
              }
              head += 1;
              tail += 1;
            }
          }
          return (count = tail);
        },
        createCallFunction(name, earlyExit = false) {
          name = name.split(" ")[0];
          const keys = Object.keys(this);
          if (Object.keys(this).indexOf(name) > -1) {
            throw new Error(
              `Can not create function name '${name}' as it already exists.`
            );
          }
          if (!/\W/g.test(name)) {
            let func;
            if (earlyExit) {
              func = `var items = this.items; var count = this.getCount(); var i = 0;\nwhile(i < count){ if (items[i++].${name}() === true) { break } }`;
            } else {
              func = `var items = this.items; var count = this.getCount(); var i = 0;\nwhile(i < count){ items[i++].${name}() }`;
            }
            !this.items && (this.items = items);
            this[name] = new Function(func);
          } else {
            throw new Error(
              `Function name '${name}' contains illegal characters. Use alpha numeric characters.`
            );
          }
        },
        callEach(name) {
          let i = 0;
          while (i < count) {
            if (items[i++][name]() === true) {
              break;
            }
          }
        },
        each(cb) {
          let i = 0;
          while (i < count) {
            if (cb(items[i], i++) === true) {
              break;
            }
          }
        },
        next() {
          if (count < items.length) {
            return items[count++];
          }
        },
        add(item) {
          if (count === items.length) {
            items.push(item);
            count++;
          } else {
            items.push(items[count]);
            items[count++] = item;
          }
          return item;
        },
        getCount() {
          return count;
        },
      };
    };
    // Helpers rand float, randI random Int
    // doFor iterator
    // sCurve curve input -Infinity to Infinity out -1 to 1
    // randHSLA creates random colour
    // CImage, CImageCtx create image and image with context attached
    const randI = (min, max = min + (min = 0)) =>
      (Math.random() * (max - min) + min) | 0;
    const rand = (min = 1, max = min + (min = 0)) =>
      Math.random() * (max - min) + min;
    const doFor = (count, cb) => {
      let i = 0;
      while (i < count && cb(i++) !== true);
    }; // the ; after while loop is important don't remove
    const sCurve = (v, p) => 2 / (1 + Math.pow(p, -v)) - 1;
    const randHSLA = (
      h,
      h1,
      s = 100,
      s1 = 100,
      l = 50,
      l1 = 50,
      a = 1,
      a1 = 1
    ) => {
      return `hsla(${randI(h, h1) % 360},${randI(s, s1)}%,${randI(
        l,
        l1
      )}%,${rand(a, a1)})`;
    };
    // canvas settings
    let w = canvas.width;
    let h = canvas.height;
    let cw = w / 2; // center
    let ch = h / 2;
    // diagonal distance used to set point alpha (see point update)
    let diag = Math.sqrt(w * w + h * h);
    // If window size is changed this is called to resize the canvas
    // It is not called via the resize event as that can fire to often and
    // debounce makes it feel sluggish so is called from main loop.
    function resizeCanvas() {
      points.clear();
      canvas.width = innerWidth;
      canvas.height = innerHeight;
      w = canvas.width;
      h = canvas.height;
      cw = w / 2; // center
      ch = h / 2;
      diag = Math.sqrt(w * w + h * h);
    }
    // create array of points
    const points = bubbleArray();
    // create optimised draw function itterator
    points.createCallFunction("draw", false);
    // spawns a new star
    function spawnPoint(pos) {
      let p = points.next();
      p = points.add(new Point());
      if (p === undefined) {
        p = points.add(new Point());
      }
      p.reset(pos);
    }
    // point object represents a single star
    function Point(pos?: { x: number; y: number }) {
      // this function is duplicated as reset
      if (pos) {
        this.x = pos.x;
        this.y = pos.y;
        this.dead = false;
      } else {
        this.x = 0;
        this.y = 0;
        this.dead = true;
      }
      this.alpha = 0;
      const x = this.x - cw;
      const y = this.y - ch;
      this.dir = Math.atan2(y, x);
      this.distStart = Math.sqrt(x * x + y * y);
      this.speed = rand(0.01, 1);
      this.col = randHSLA(220, 280, 100, 100, 50, 100);
      this.dx = Math.cos(this.dir) * this.speed;
      this.dy = Math.sin(this.dir) * this.speed;
    }
    Point.prototype = {
      reset: Point, // resets the point
      update() {
        // moves point and returns false when outside
        this.speed *= hyperSpeed; // increase speed the more it has moved
        this.x += Math.cos(this.dir) * this.speed;
        this.y += Math.sin(this.dir) * this.speed;
        const x = this.x - cw;
        const y = this.y - ch;
        this.alpha =
          (Math.sqrt(x * x + y * y) - this.distStart) /
          (diag * 0.5 - this.distStart);
        if (
          this.alpha > 1 ||
          this.x < 0 ||
          this.y < 0 ||
          this.x > w ||
          this.h > h
        ) {
          this.dead = true;
        }
        return !this.dead;
      },
      draw() {
        // draws the point
        ctx.strokeStyle = this.col;
        ctx.globalAlpha = 0.25 + this.alpha * 0.75;
        ctx.beginPath();
        ctx.lineTo(
          this.x - this.dx * this.speed,
          this.y - this.dy * this.speed
        );
        ctx.lineTo(this.x, this.y);
        ctx.stroke();
      },
    };
    const maxStarCount = 256;
    const p = { x: 0, y: 0 };
    var hyperSpeed = 1.001;
    const alphaZero = sCurve(1, 2);
    let startTime: number | undefined;
    function loop(time: number) {
      if (startTime === undefined) {
        startTime = time;
      }
      if (w !== innerWidth || h !== innerHeight) {
        resizeCanvas();
      }
      // if mouse down then go to hyper speed
      if (effect.warpspeed) {
        if (hyperSpeed < 1.25) {
          hyperSpeed += 0.01;
        }
      } else {
        if (hyperSpeed > 1.01) {
          hyperSpeed -= 0.01;
        } else if (hyperSpeed > 1.001) {
          hyperSpeed -= 0.001;
        }
      }
      const hs = sCurve(hyperSpeed, 2.25);
      ctx.globalAlpha = 1;
      ctx.setTransform(1, 0, 0, 1, 0, 0); // reset transform
      ctx.fillStyle = `rgba(0,0,0,${1 - (hs - alphaZero) * 2})`;
      ctx.fillRect(0, 0, w, h);
      // the amount to expand canvas feedback
      const sx = (hyperSpeed - 1) * cw * 0.05;
      const sy = (hyperSpeed - 1) * ch * 0.05;
      // increase alpha as speed increases
      ctx.globalAlpha = (hs - alphaZero) * 2;
      ctx.globalCompositeOperation = "lighter";
      // draws feedback twice
      ctx.drawImage(canvas, -sx, -sy, w + sx * 2, h + sy * 2);
      ctx.drawImage(canvas, -sx / 2, -sy / 2, w + sx, h + sy);
      ctx.globalCompositeOperation = "source-over";
      // add stars if count < maxStarCount
      if (points.getCount() < maxStarCount) {
        const cent = (hyperSpeed - 1) * 0.5; // pulls stars to center as speed increases
        doFor(10, () => {
          p.x = rand(cw * cent, w - cw * cent); // random screen position
          p.y = rand(ch * cent, h - ch * cent);
          spawnPoint(p);
        });
      }
      // as speed increases make lines thicker
      ctx.lineWidth = 2 + hs * 2;
      ctx.lineCap = "round";
      points.update(); // update points
      points.draw(); // draw points
      ctx.globalAlpha = 1;
      if (effect.paused) return;
      requestAnimationFrame(loop);
    }
    requestAnimationFrame(loop);
  }
</script>
